Part 1:
import pandas as pd

df = pd.read_csv('olympics.csv', index_col=0, skiprows=1)

for col in df.columns:
    if col[:2]=='01':
        df.rename(columns={col:'Gold'+col[4:]}, inplace=True)
    if col[:2]=='02':
        df.rename(columns={col:'Silver'+col[4:]}, inplace=True)
    if col[:2]=='03':
        df.rename(columns={col:'Bronze'+col[4:]}, inplace=True)
    if col[:1]=='â„–':
        df.rename(columns={col:'#'+col[1:]}, inplace=True)

names_ids = df.index.str.split('\s\(') # split the index by '('

df.index = names_ids.str[0] # the [0] element is the country name (new index) 
df['ID'] = names_ids.str[1].str[:3] # the [1] element is the abbreviation or ID (take first 3 characters from that)

df = df.drop('Totals')
df.head()

Question 0:

# You should write your whole answer within the function provided. The autograder will call
# this function and compare the return value against the correct solution value
def answer_zero():
    # This function returns the row for Afghanistan, which is a Series object. The assignment
    # question description will tell you the general format the autograder is expecting
    return df.iloc[0]

# You can examine what your function returns by calling it in the cell. If you have questions
# about the assignment formats, check out the discussion forums for any FAQs
answer_zero() 

Question 1:

def answer_one():
    return df[df['Gold'] == df['Gold'].max()].iloc[0].name
answer_one()

Question 2:

def answer_two():
    return df[df['Gold']-df['Gold.1'] == (df['Gold']-df['Gold.1']).max()].iloc[0].name
    
answer_two()

Question 3:

def answer_three():
    copy_df = df.copy()
    copy_df = copy_df[(copy_df['Gold']>0) & (copy_df['Gold.1']>0)]
    
    return ((copy_df[(copy_df['Gold']-copy_df['Gold.1'])/copy_df['Gold.2'] == ((copy_df['Gold']-copy_df['Gold.1'])/copy_df['Gold.2']).max()].iloc[0].name))
answer_three()

Question 4:

def answer_four():
    d = {}
    for i in range(len(df)):
        d[df.iloc[i].name] = df.iloc[i]['Gold.2']*3 + df.iloc[i]['Silver.2']*2 + df.iloc[i]['Bronze.2']
    return pd.Series(d)
answer_four()

Question 5:

def answer_five():
    ans = census_df['STNAME'].value_counts()
    return ans[ans == ans.max()].index[0]
answer_five()

Question 6:
Question 7:
Question 8:

def answer_eight():
    ans = census_df[(census_df['REGION'] == 1) | (census_df['REGION'] == 2)]
    an1 = ans[ans['POPESTIMATE2015'] > ans['POPESTIMATE2014']]
    an2  = an1[an1['CTYNAME'].str.contains('^Washington*')]
    return an2[['STNAME','CTYNAME']]
answer_eight()
